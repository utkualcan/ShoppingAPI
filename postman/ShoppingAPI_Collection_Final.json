{
  "info": {
    "_postman_id": "shopping-api-full-test-collection",
    "name": "Shopping API Full Test Collection",
    "description": "Comprehensive Shopping API test collection for Guest, User, and Admin roles. All 112 scenarios, expected status codes, and role-based access are covered.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8080" },
    { "key": "adminToken", "value": "" },
    { "key": "userToken", "value": "" },
    { "key": "userId", "value": "1" },
    { "key": "otherUserId", "value": "2" },
    { "key": "adminUserId", "value": "1" },
    { "key": "productId", "value": "1" },
    { "key": "otherProductId", "value": "2" },
    { "key": "cartId", "value": "1" },
    { "key": "otherCartId", "value": "2" },
    { "key": "orderId", "value": "1" },
    { "key": "otherOrderId", "value": "2" },
    { "key": "favoriteId", "value": "1" },
    { "key": "otherFavoriteId", "value": "2" }
  ],
  "item": [
    {
      "name": "0. Authentication (Register, Login, Logout)",
      "item": [
        {
          "name": "ADMIN Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () { pm.response.to.have.status(200); });",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"adminToken\", jsonData.token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "USER Register (if not exists)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK or 400 if user exists\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"email\": \"{{testUserEmail}}\",\n    \"password\": \"{{testUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "USER Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () { pm.response.to.have.status(200); });",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"userToken\", jsonData.token);",
                  "pm.collectionVariables.set(\"userId\", jsonData.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testUserPassword}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Guest User Scenarios",
      "description": "All endpoints tested as guest (unauthenticated). Expected status codes: 401 for protected endpoints, 200 for public endpoints.",
      "item": [
        { "name": "1- Get All Users – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/users" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "2- Get User by ID – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/users/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "3- Create User – 401", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/users" }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"guest\",\n  \"password\": \"guestpass\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "4- Update User – 401", "request": { "method": "PUT", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/users/{{userId}}" }, "body": { "mode": "raw", "raw": "{\n  \"email\": \"newemail@example.com\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "5- Delete User – 401", "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/users/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "6- List All Products – 200", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/products" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } }] },
        { "name": "7- Get Product by ID – 200", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/products/{{productId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } }] },
        { "name": "8- Create Product – 403", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/products" }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Sample Product\",\n  \"price\": 10.0\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 403', function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } }] },
        { "name": "9- Update Product – 403", "request": { "method": "PUT", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/products/{{productId}}" }, "body": { "mode": "raw", "raw": "{\n  \"price\": 15.0\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 403', function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } }] },
        { "name": "10- Delete Product – 403", "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/products/{{productId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 403', function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } }] },
        { "name": "11- Get All Carts – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "12- Get Cart by ID – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "13- Get simple cart by ID – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/simple/{{cartId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "14- Get cart by user ID – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/user/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "15- Add item to cart – 401", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/items" }, "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 1\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "16- Update Cart – 401", "request": { "method": "PUT", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}" }, "body": { "mode": "raw", "raw": "{\n  \"quantity\": 2\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "17- Clear Cart – 401", "request": { "method": "POST", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/clear" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "18- Delete product in cart – 401", "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/items/{{productId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "19- Get all orders – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "20- Get order by id – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/{{orderId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "21- Get order simple – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/simple/{{orderId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "22- Get User’s orders – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/user/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "23- Create order from cart – 401", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/orders" }, "body": { "mode": "raw", "raw": "{\n  \"cartId\": \"{{cartId}}\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "24- Add favorites – 401", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/favorites" }, "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{productId}}\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "25- Check if is favorite – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/favorites/check/{{productId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "26- Get user’s favorite – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/favorites/user/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "27- Remove favorite – 401", "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/favorites/{{favoriteId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "28- Get current user info – 401", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/auth/me" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        { "name": "29- Register – 200", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/auth/register" }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"newpass\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } }] },
        { "name": "30- Login – 200", "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/auth/login" }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"newuser\",\n  \"password\": \"newpass\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } }] }
      ]
    },
    {
      "name": "2. Normal Kullanıcı (USER) Senaryoları",
      "item": [
        {
          "name": "Get My Info",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Attempt to Get All Users (Should be 403)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Yönetici (ADMIN) Senaryoları",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () { pm.response.to.have.status(200); });",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"tempProductId\", jsonData.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Admin Test Product {{$randomInt}}\",\n    \"price\": 19.99,\n    \"stockQuantity\": 100\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Product (that is not in use)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{tempProductId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "{{tempProductId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. İleri Düzey Senaryolar",
      "item": [
        {
          "name": "Security - Access with Invalid Token",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "this.is.an.invalid.token",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Validation - Create Product with Negative Price",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Negative Price Product\",\n    \"price\": -50.0,\n    \"stockQuantity\": 10\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Edge Case - Delete Product in Use (Should be 409)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "1"
              ],
              "description": "Bu testin çalışması için veritabanında ID'si 1 olan ürünün bir siparişte veya favoride olması gerekir."
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Guest User Scenarios - Carts, Orders, Favorites",
      "description": "Testing Cart, Order, and Favorite functionalities as a guest user. Expected status codes: 401 for unauthorized access, 200 for successful public access.",
      "item": [
        {
          "name": "Get All Carts – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get Cart by ID – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get simple cart by ID – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/simple/{{cartId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "simple", "{{cartId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get cart by user ID – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/user/{{userId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "user", "{{userId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Add item to cart – 401",
          "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/items", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}", "items" ] }, "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 1\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Update Cart – 401",
          "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}" }, "body": { "mode": "raw", "raw": "{\n  \"quantity\": 2\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Clear Cart – 401",
          "request": { "method": "POST", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/clear", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}", "clear" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Delete product in cart – 401",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/items/{{productId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}", "items", "{{productId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get all orders – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get order by id – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/{{orderId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders", "{{orderId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 401\", function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get order simple – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/simple/{{orderId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Get User’s orders – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/user/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Create order from cart – 401",
          "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/orders" }, "body": { "mode": "raw", "raw": "{\n  \"cartId\": \"{{cartId}}\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Add favorites – 401",
          "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/favorites" }, "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{productId}}\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Check if is favorite – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/favorites/check/{{productId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Get user’s favorite – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/favorites/user/{{userId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Remove favorite – 401",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/favorites/{{favoriteId}}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Get current user info – 401",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/auth/me" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });" ], "type": "text/javascript" } }] },
        {
          "name": "Register – 200",
          "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/auth/register" }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"newpass\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } }] },
        {
          "name": "Login – 200",
          "request": { "method": "POST", "header": [{ "key": "Content-Type", "value": "application/json" }], "url": { "raw": "{{baseUrl}}/api/auth/login" }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"newuser\",\n  \"password\": \"newpass\"\n}" } }, "event": [{ "listen": "test", "script": { "exec": [ "pm.test('Status code is 200', function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } }] }
      ]
    },
    {
      "name": "2. User Role Scenarios",
      "description": "All endpoints tested as authenticated USER. Covers scenarios 31-70. Expected status codes: 200, 403, 204, etc.",
      "item": [
        {
          "name": "Get current user info after login – 200",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{userToken}}" } ], "url": { "raw": "{{baseUrl}}/api/auth/me", "host": [ "{{baseUrl}}" ], "path": [ "api", "auth", "me" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "List All users – 403",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{userToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users", "host": [ "{{baseUrl}}" ], "path": [ "api", "users" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get User by id – 403",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{userToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users/{{otherUserId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{otherUserId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Update user by own user’s id – 403",
          "request": { "method": "PUT", "header": [ { "key": "Authorization", "value": "Bearer {{userToken}}" }, { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/users/{{userId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{userId}}" ] }, "body": { "mode": "raw", "raw": "{\n  \"email\": \"updateduser@example.com\"\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Create user – 403",
          "request": { "method": "POST", "header": [ { "key": "Authorization", "value": "Bearer {{userToken}}" }, { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/users", "host": [ "{{baseUrl}}" ], "path": [ "api", "users" ] }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"anotheruser\",\n  \"password\": \"anotherpass\"\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Delete user – 403",
          "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "Bearer {{userToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users/{{userId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{userId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get All Products – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/products" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get Product by ID – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/products/{{productId}}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Create Product – 403",
          "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/products" }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Sample Product\",\n  \"price\": 10.0\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Update Product – 403",
          "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/products/{{productId}}" }, "body": { "mode": "raw", "raw": "{\n  \"price\": 15.0\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Delete Product – 403",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/products/{{productId}}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users (Should be 401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. User Role Scenarios - Carts, Orders, Favorites",
      "description": "Testing Cart, Order, and Favorite functionalities as an authenticated user. Expected status codes: 200, 403, 204, etc.",
      "item": [
        {
          "name": "Get All Carts – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get Cart by ID – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get simple cart by ID – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/simple/{{cartId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "simple", "{{cartId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get cart by user ID – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/carts/user/{{userId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "user", "{{userId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Add item to cart – 403",
          "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/items", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}", "items" ] }, "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 1\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Update Cart – 403",
          "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}" }, "body": { "mode": "raw", "raw": "{\n  \"quantity\": 2\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Clear Cart – 403",
          "request": { "method": "POST", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/clear", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}", "clear" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Delete product in cart – 403",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/carts/{{cartId}}/items/{{productId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "carts", "{{cartId}}", "items", "{{productId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 403\", function () { pm.response.to.have.status(403); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get all orders – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get order by id – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/{{orderId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders", "{{orderId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get order simple – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/simple/{{orderId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders", "simple", "{{orderId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get User’s orders – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/orders/user/{{userId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders", "user", "{{userId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Create order from cart – 200",
          "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/orders", "host": [ "{{baseUrl}}" ], "path": [ "api", "orders" ] }, "body": { "mode": "raw", "raw": "{\n  \"cartId\": \"{{cartId}}\"\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Add favorites – 200",
          "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/favorites", "host": [ "{{baseUrl}}" ], "path": [ "api", "favorites" ] }, "body": { "mode": "raw", "raw": "{\n  \"productId\": \"{{productId}}\"\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Check if is favorite – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/favorites/check/{{productId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "favorites", "check", "{{productId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get user’s favorite – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/favorites/user/{{userId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "favorites", "user", "{{userId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Remove favorite – 204",
          "request": { "method": "DELETE", "url": { "raw": "{{baseUrl}}/api/favorites/{{favoriteId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "favorites", "{{favoriteId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get current user info – 200",
          "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/api/auth/me", "host": [ "{{baseUrl}}" ], "path": [ "api", "auth", "me" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        }
      ]
    },
    {
      "name": "4. Admin Role Scenarios",
      "description": "All endpoints tested as authenticated ADMIN. Covers scenarios 71-112. Expected status codes: 200, 204, 400, etc.",
      "item": [
        {
          "name": "Get current user info after login – 200",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/api/auth/me", "host": [ "{{baseUrl}}" ], "path": [ "api", "auth", "me" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "List All users – 200",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users", "host": [ "{{baseUrl}}" ], "path": [ "api", "users" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get any User by id – 200",
          "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users/{{otherUserId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{otherUserId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Update any user by user’s id – 200",
          "request": { "method": "PUT", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" }, { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/users/{{otherUserId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{otherUserId}}" ] }, "body": { "mode": "raw", "raw": "{\n  \"email\": \"adminupdated@example.com\"\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Create user – 200",
          "request": { "method": "POST", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" }, { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/api/users", "host": [ "{{baseUrl}}" ], "path": [ "api", "users" ] }, "body": { "mode": "raw", "raw": "{\n  \"username\": \"newadminuser\",\n  \"password\": \"newadminpass\",\n  \"email\": \"newadminuser@example.com\"\n}" } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Delete USER role user – 204",
          "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users/{{otherUserId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{otherUserId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Delete ADMIN role user – 400",
          "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "Bearer {{adminToken}}" } ], "url": { "raw": "{{baseUrl}}/api/users/{{adminUserId}}", "host": [ "{{baseUrl}}" ], "path": [ "api", "users", "{{adminUserId}}" ] } },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });" ], "type": "text/javascript" } } ]
        },
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "{{productId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Product Name\",\n    \"price\": 29.99,\n    \"stockQuantity\": 150\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "{{productId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "products",
                "{{productId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Carts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/carts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "carts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Cart by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/carts/{{cartId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "carts",
                "{{cartId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Cart",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"quantity\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/carts/{{cartId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "carts",
                "{{cartId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Cart",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/carts/{{cartId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "carts",
                "{{cartId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "{{orderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Order",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"shipped\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "{{orderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Order",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "orders",
                "{{orderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Favorites",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/favorites",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "favorites"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Favorite by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/favorites/{{favoriteId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "favorites",
                "{{favoriteId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Favorite",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/favorites/{{favoriteId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "favorites",
                "{{favoriteId}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
