package org.utku.shoppingapi.dto.request;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.*;
import org.utku.shoppingapi.constants.AppConstants;
import java.math.BigDecimal;

/**
 * Request DTO for updating an existing product.
 * Allows partial updates by making all fields optional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UpdateProductRequest {
    
    // Getters and setters will be generated by Lombok @Data annotation
    
    /**
     * Updated name of the product.
     * Optional - only update if provided.
     */
    @Size(min = AppConstants.MIN_PRODUCT_NAME_LENGTH, max = AppConstants.MAX_PRODUCT_NAME_LENGTH, 
          message = "Product name must be between " + AppConstants.MIN_PRODUCT_NAME_LENGTH + 
                   "-" + AppConstants.MAX_PRODUCT_NAME_LENGTH + " characters")
    private String name;
    
    /**
     * Updated description of the product.
     * Optional - only update if provided.
     */
    @Size(max = AppConstants.MAX_DESCRIPTION_LENGTH, 
          message = "Description cannot exceed " + AppConstants.MAX_DESCRIPTION_LENGTH + " characters")
    private String description;
    
    /**
     * Updated price of the product.
     * Optional - only update if provided.
     */
    @DecimalMin(value = "0.0", inclusive = false, message = "Price must be greater than zero")
    private BigDecimal price;
    
    /**
     * Updated stock quantity.
     * Optional - only update if provided.
     */
    @Min(value = 0, message = "Stock quantity cannot be negative")
    private Integer stockQuantity;
    
    /**
     * Updated category of the product.
     * Optional - only update if provided.
     */
    private String category;
    
    /**
     * Updated active status of the product.
     * Optional - only update if provided.
     */
    private Boolean active;
}